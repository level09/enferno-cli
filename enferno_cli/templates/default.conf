# Redirect all HTTP to HTTPS non-www
server {
    listen 80;
    server_name {{ server_hostname }} www.{{ server_hostname }};
    return 301 https://{{ server_hostname }}$request_uri;
}

# Redirect www HTTPS to non-www
server {
    listen 443 ssl http2;
    server_name www.{{ server_hostname }};

    ssl_certificate /etc/letsencrypt/live/{{ server_hostname }}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{{ server_hostname }}/privkey.pem;

    return 301 https://{{ server_hostname }}$request_uri;
}

# Main HTTPS server
server {
    listen 443 ssl http2;
    server_name {{ server_hostname }};

    # SSL Configuration
    ssl_certificate /etc/letsencrypt/live/{{ server_hostname }}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{{ server_hostname }}/privkey.pem;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers EECDH+AESGCM:EDH+AESGCM;
    ssl_prefer_server_ciphers off;

    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options SAMEORIGIN;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy "no-referrer-when-downgrade";

    root /home/{{ user_name }}/{{ server_hostname }};

    # Static files
    location /static {
        alias /home/{{ user_name }}/{{ server_hostname }}/static;
        expires 1h;
        access_log off;
    }

    # Media files
    location /media {
        alias /home/{{ user_name }}/{{ server_hostname }}/media;
        expires 1h;
        access_log off;
    }

    # ACME challenges
    location /.well-known/acme-challenge/ {
        root /var/www/html;
    }

    # Security rules
    location = /favicon.ico { access_log off; log_not_found off; }
    location ~ /\. { deny all; }
    location ~* \.(pl|cgi|py|sh|lua|log|md5)$ { deny all; }

    # Main application
    location / {
        limit_req zone=post_limit burst=10 nodelay;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $http_host;
        proxy_redirect off;
        proxy_pass http://127.0.0.1:{{ python_port }};
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
} 